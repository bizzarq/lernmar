import { CoursePlayer2004_4 } from "./CoursePlayer2004_4";


/**
 * a course from the index.json file generated by course_index.py
 */
interface Course {
  name: string,
  path: string,
}

/**
 * manager of courses which displayes an index of available courses and, when a course gets
 * selected, starts it in the respective player.
 */
class CourseManager {
  #courseUrl;

  /**
   * constructor.
   * @param courseUrl url of course directory (in which the index.json file is placed). default is
   *    "" (same directory as page). if it is not "", it should end with "/".
   *    example: "https://www.example.com/courses/". relative paths are relative to the page, this
   *    script is executed in. examples: "" or "courses/".
   */
  constructor(courseUrl?: string) {
    this.#courseUrl = courseUrl ? courseUrl : "";
  }

  /**
   * start managing courses.
   * @param section root element for this course manager.
   */
  async start(section: HTMLElement) {
    let description = document.createElement("div");
    description.innerText = "This is the Lernmar SCORM course player";
    section.replaceChildren(description);
    this.#renderIndex(section);
  }

  /**
   * read the index.json file and render the index accordingly.
   * @param section root element for this course manager.
   */
  async #renderIndex(section: HTMLElement) {
    try {
      let response = await fetch(`${this.#courseUrl}index.json`);
      let index = await response.json();
      let entries = document.createElement("section");
      entries.classList.add("index");
      for (let course of index?.courses) {
        let name = course.name;
        if (name && course.path) {
          let entry = document.createElement('button');
          entry.innerText = name;
          entries.appendChild(entry);
          entry.onclick = () => this.#playCourse(section, course as Course);
        }
      }
      if (entries.childElementCount > 0) {
        section.replaceChildren(entries);
      }
      else {
        let message = document.createElement("div");
        message.innerText = "no courses in index";
        section.replaceChildren(message);
      }
    }
    catch {
      let message = document.createElement("div");
      message.innerText = "cannot read course index";
      section.replaceChildren(message);
    }
  }

  /**
   * plays a course in its appropriate player.
   * re-renders index after course termination.
   * @param section root element for this course manager.
   * @param course course to play.
   */
  #playCourse(section: HTMLElement, course: Course) {
    let player = this.#initializePlayer();
    player.onTerminate = () => {
      this.#renderIndex(section);
    }

    let iframe = document.createElement("iframe");
    iframe.title = course.name;
    iframe.src = `${this.#courseUrl}/${course.path}`;
    iframe.width = "100%";
    iframe.height = section.clientHeight.toString();
    section.replaceChildren(iframe);
  }

  #initializePlayer(): CoursePlayer2004_4 {
    if (window.API_1484_11 instanceof CoursePlayer2004_4) {
        return window.API_1484_11;
    }
    let player = new CoursePlayer2004_4();
    window.API_1484_11 = player;
    window.close = () => {
      console.log("window.close(): call Terminate");
      player.Terminate("");
    }
    return player;
  }
}


export { CourseManager };
