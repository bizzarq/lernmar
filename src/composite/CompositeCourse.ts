import { findApi } from "../api/findApi2004_4";
import { ScormApi_2004_4 } from "../api/ScormApi2004_4";
import { CoursePlayer2004_4 } from "../player/CoursePlayer2004_4";
import { SubCourseAdapter2004_4 } from "./SubCourseAdapter2004_4";

/**
 * a course from the index.json file generated by course_index.py
 */
interface Course {
  name: string,
  path: string,
}


class CompositeCourse {
  #courseUrl;

  /**
   * constructor.
   * @param courseUrl url of course directory (in which the main index.html file is placed). default
   *    is "" (same directory as page). if it is not "", it should end with "/".
   *    example: "https://www.example.com/my_course/".
   */
  constructor(courseUrl?: string) {
    this.#courseUrl = courseUrl ? courseUrl : "";
  }

  /**
   * start executing a composite course.
   * @param section root element for this course. sub-courses will run in an iframe inside this
   *   section.
   */
  async start(section: HTMLElement) {
    let description = document.createElement("div");
    description.innerText = "This is a Lernmar Composite Course";
    section.replaceChildren(description);

    await this.#executeCourse(section);

    description.innerText = "The End";
    section.replaceChildren(description);
  }

  async #executeCourse(section: HTMLElement) {
    let subCourses = await this.#fetchSubCourses();
    // get the api of the parent window and set the api in this window
    let api: ScormApi_2004_4;
    try {
      api = findApi();
    }
    catch {
      console.log("Could not find scorm api. running in stand-alone mode.");
      api = new CoursePlayer2004_4();
    }
    let adapter = new SubCourseAdapter2004_4(api, subCourses.length);
    window.API_1484_11 = adapter;

    for (let course of subCourses) {
      adapter.startSubCourse(course.name);
      let subCourseEnd = new Promise<void>((resolve) => {
        adapter.onSubCourseEnd = () => resolve();
      });

      let iframe = document.createElement("iframe");
      iframe.title = course.name
      iframe.src = `${this.#courseUrl}courses/${course.path}`;
      iframe.width = "100%";
      iframe.height = section.clientHeight.toString();
      section.replaceChildren(iframe);

      await subCourseEnd;
    }
  }

  /**
   * read the index.json file and return its entries.
   */
  async #fetchSubCourses(): Promise<Array<Course>> {
    let url = `${this.#courseUrl}courses/index.json`;
    let subCourses: Array<Course> = [];
    try {
      let response = await fetch(url);
      let index = await response.json();
      for (let course of index?.courses) {
        let name = course.name;
        let path = course.path;
        if (typeof name === "string" && typeof path === "string") {
          subCourses.push(course);
        }
      }
    }
    catch {
      console.error(`cannot read index in ${url}`);
    }
    return subCourses;
  }

}


export { CompositeCourse };
